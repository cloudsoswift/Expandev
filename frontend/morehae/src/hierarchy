    const diagram = d3
      .select(roadmapRef.current)
      .attr("width", width)
      .attr("height", height)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    const tree = d3.tree().size([height, width]);
    const root = d3.hierarchy(treeData, (d) => d.low_level);
    const update = (source) => {
      const treeData = tree(root);
      const nodes = treeData.descendants().forEach((d) => {
        d.y = d.depth * 180;
      });
      const node = diagram.selectAll("g.node").data(nodes, (d) => d.id);
      const nodeEnter = node
        .enter()
        .append("g")
        .attr("class", "node")
        .attr(
          "transform",
          (d) => "translate(" + source.y0 + ", " + source.x0 + ")"
        )
        .on("click", click);

      nodeEnter
        .append("circle")
        .attr("class", "node")
        .attr("r", 0)
        .style("fill", (d) => (d.low_level ? "red" : "black"));
      const nodeUpdate = nodeEnter.merge(node);
      nodeUpdate
        .transition()
        .duration(100)
        .attr("transform", (d) => "translate(" + d.y + "," + d.x + ")");
      nodeUpdate
        .select("circle.node")
        .attr("r", 10)
        .style("fill", (d) => (d.low_level ? "red" : "black"));
      const nodeExit = node
        .exit()
        .transition()
        .duration(100)
        .attr("transform", function (d) {
          return "translate(" + source.y + "," + source.x + ")";
        })
        .remove();
      nodeExit.select("circle").attr("r", 0);
      nodeExit.select("text").style("fill-opacity", 0);
      // links
      function diagonal(s, d) {
        const path = `M ${s.y} ${s.x}
      C ${(s.y + d.y) / 2} ${s.x}
        ${(s.y + d.y) / 2} ${d.x}
        ${d.y} ${d.x}`;
        return path;
      }
      var links = treeData.descendants().slice(1);
      var link = diagram.selectAll("path.link").data(links, function (d) {
        return d.id;
      });
      var linkEnter = link
        .enter()
        .insert("path", "g")
        .attr("class", "link")
        .attr("d", function (d) {
          var o = { x: source.x0, y: source.y };
          return diagonal(o, o);
        });
      var linkUpdate = linkEnter.merge(link);
      linkUpdate
        .transition()
        .duration(100)
        .attr("d", function (d) {
          return diagonal(d, d.parent);
        });

      var linkExit = link
        .exit()
        .transition()
        .duration(100)
        .attr("d", function (d) {
          var o = { x: source.x0, y: source.y0 };
          return diagonal(o, o);
        })
        .remove();

      nodes.forEach(function (d) {
        d.x0 = d.x;
        d.y0 = d.y;
      });

      function click(event, d) {
        if (d.children) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
        update(d);
      }
    };
    update(root);