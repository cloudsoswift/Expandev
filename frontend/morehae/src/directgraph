  const [links, setLinks] = useState([
    { source: "Backend", target: "Internet", priority: 0 },
    { source: "Internet", target: "How does the internet work?", priority: 2 },
    { source: "Internet", target: "What is HTTP?", priority: 2 },
    { source: "Internet", target: "Browsers and how they work?", priority: 2 },
    { source: "Internet", target: "Learn a Language", priority: 1 },
    { source: "Learn a Language", target: "Java", priority: 2 },
    { source: "Learn a Language", target: "Python", priority: 2 },
    { source: "Learn a Language", target: "Javascript", priority: 2 },
  ]);
  const [nodes, setNodes] = useState([
    { id: "Backend" },
    { id: "Internet" },
    { id: "How does the internet work?" },
    { id: "What is HTTP?" },
    { id: "Browsers and how they work?" },
    { id: "Learn a Language" },
    { id: "Java" },
    { id: "Python" },
    { id: "Javascript" },
  ]);
  const roadmapRef = useRef(null);

  // links.forEach(function (link) {
  //   link.source =
  //     nodes[link.source] || (nodes[link.source] = { name: link.source });
  //   link.target =
  //     nodes[link.target] || (nodes[link.target] = { name: link.target });
  // });

  useEffect(() => {
    const chart = d3.select(roadmapRef.current);

    const forceNode = d3.forceManyBody().strength(-30);
    const forceLink = d3.forceLink(links).id((d) => d.id);

    const simulation = d3
      .forceSimulation(nodes)
      .force("link", forceLink)
      .force("charge", forceNode)
      .force("center", d3.forceCenter(900 / 2, 400 / 2))
      .on("tick", ticked);

    chart.attr("width", 900).attr("height", 400).text("The Graph").append("g");
    // chart
    //   .selectAll("circle .nodes")
    //   .data(nodes)
    //   .join(
    //     (enter) => enter.append("circle"),
    //     (update) => update.attr("class", "updated"),
    //     (exit) => exit.remove()
    //   )
    //   .attr("class", "nodes")
    //   .attr("cx", function (d) {
    //     return d.x;
    //   })
    //   .attr("cy", function (d) {
    //     return d.y;
    //   })
    //   .attr("r", "10px")
    //   .attr("fill", "black")
    // .on("mouseover", mouseover);

    const link = chart
      .append("g")
      .selectAll("line")
      .attr("stroke", "#999")
      .attr("stroke-width", 3)
      .data(links)
      .join("line");

    const node = chart
      .append("g")
      .selectAll("circle")
      .attr("fill", "currentColor")
      .attr("stroke", "#fff")
      .attr("stroke-opacity", 1)
      .attr("stroke-width", 1.5)
      .data(nodes)
      .join("circle")
      .attr("r", 10);
    node
      .append("g")
      .selectAll("text")
      .data(nodes)
      // .attr("x", 12)
      // .attr("dy", ".35em")
      .append("text")
      .text(function (d) {
        return d.id;
      });

    function ticked() {
      link
        .attr("x1", (d) => d.source.x)
        .attr("y1", (d) => d.source.y)
        .attr("x2", (d) => d.target.x)
        .attr("y2", (d) => d.target.y);

      node.attr("cx", (d) => d.x).attr("cy", (d) => d.y);
    }

    function drag(simulation) {    
      function dragstarted(event) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        event.subject.fx = event.subject.x;
        event.subject.fy = event.subject.y;
      }
      
      function dragged(event) {
        event.subject.fx = event.x;
        event.subject.fy = event.y;
      }
      
      function dragended(event) {
        if (!event.active) simulation.alphaTarget(0);
        event.subject.fx = null;
        event.subject.fy = null;
      }
      
      return d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended);
    }
    node.call(drag(simulation))
  }, [nodes]);